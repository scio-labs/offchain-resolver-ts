// Generated by dedot cli

import type { AccountId32, Bytes, BytesLike } from 'dedot/codecs'

export type InkPrimitivesLangError = 'CouldNotReadInput'

export type AznsRegistryError =
  | { type: 'NotAdmin' }
  | { type: 'NameAlreadyExists' }
  | { type: 'NameDoesntExist' }
  | { type: 'NameNotAllowed' }
  | { type: 'CallerIsNotOwner' }
  | { type: 'CallerIsNotController' }
  | { type: 'FeeNotPaid' }
  | { type: 'NameEmpty' }
  | { type: 'RecordNotFound' }
  | { type: 'WithdrawFailed' }
  | { type: 'InsufficientBalance' }
  | { type: 'NoResolvedAddress' }
  | { type: 'AlreadyClaimed' }
  | { type: 'InvalidMerkleProof' }
  | { type: 'CannotBuyReservedName' }
  | { type: 'NotReservedName' }
  | { type: 'NotAuthorised' }
  | { type: 'ZeroAddress' }
  | { type: 'RecordsOverflow' }
  | { type: 'FeeError'; value: AznsFeeCalculatorError }
  | { type: 'OnlyDuringWhitelistPhase' }
  | { type: 'RestrictedDuringWhitelistPhase' }

export type AznsFeeCalculatorError = 'NotAdmin' | 'InvalidDuration' | 'ZeroLength' | 'ZeroPrice'

export type InterfacesPsp34StandardPsp34Error =
  | { type: 'Custom'; value: string }
  | { type: 'SelfApprove' }
  | { type: 'NotApproved' }
  | { type: 'TokenExists' }
  | { type: 'TokenNotExists' }
  | { type: 'SafeTransferCheckFailed'; value: string }

export type AznsRegistryNameStatus =
  | {
      type: 'Registered'
      value: [AznsRegistryAddressDict, AccountId32 | undefined]
    }
  | { type: 'Reserved'; value?: AccountId32 | undefined }
  | { type: 'Available' }
  | { type: 'Unavailable' }

export type AznsRegistryAddressDict = {
  owner: AccountId32
  controller: AccountId32
  resolved: AccountId32
}

export type InterfacesPsp34StandardId =
  | { type: 'U8'; value: number }
  | { type: 'U16'; value: number }
  | { type: 'U32'; value: number }
  | { type: 'U64'; value: bigint }
  | { type: 'U128'; value: bigint }
  | { type: 'Bytes'; value: Bytes }

export type InterfacesPsp34StandardIdLike =
  | { type: 'U8'; value: number }
  | { type: 'U16'; value: number }
  | { type: 'U32'; value: number }
  | { type: 'U64'; value: bigint }
  | { type: 'U128'; value: bigint }
  | { type: 'Bytes'; value: BytesLike }

export type InterfacesArtZeroTraitsArtZeroError = {
  type: 'Custom'
  value: string
}

export type InkEnvNoChainExtension = null
