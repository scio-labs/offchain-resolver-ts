// Generated by dedot cli

import type { GenericSubstrateApi } from "dedot/types";
import type {
  AccountId32Like,
  Result,
  FixedBytes,
  BytesLike,
  AccountId32,
  Bytes,
} from "dedot/codecs";
import type {
  GenericContractQuery,
  GenericContractQueryCall,
  ContractCallOptions,
  GenericContractCallResult,
  ContractCallResult,
} from "dedot/contracts";
import type {
  AznsRegistryError,
  InkPrimitivesLangError,
  InterfacesPsp34StandardPsp34Error,
  AznsRegistryNameStatus,
  AznsRegistryAddressDict,
  InterfacesPsp34StandardId,
  InterfacesPsp34StandardIdLike,
  InterfacesArtZeroTraitsArtZeroError,
} from "./types";

export interface ContractQuery<ChainApi extends GenericSubstrateApi>
  extends GenericContractQuery<ChainApi> {
  /**
   * Register specific name on behalf of some other address.
   * Pay the fee, but forward the ownership of the name to the provided recipient
   *
   * NOTE: During the whitelist phase, use `register()` method instead.
   *
   * @param {string} name
   * @param {AccountId32Like} recipient
   * @param {number} yearsToRegister
   * @param {string | undefined} referrer
   * @param {string | undefined} bonusName
   * @param {ContractCallOptions} options
   *
   * @selector 0x7aa26a96
   **/
  registerOnBehalfOf: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      recipient: AccountId32Like,
      yearsToRegister: number,
      referrer: string | undefined,
      bonusName: string | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Register specific name with caller as owner.
   *
   * @param {string} name
   * @param {number} yearsToRegister
   * @param {string | undefined} referrer
   * @param {string | undefined} bonusName
   * @param {boolean} setAsPrimaryName
   * @param {ContractCallOptions} options
   *
   * @selector 0xb16554be
   **/
  registerV2: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      yearsToRegister: number,
      referrer: string | undefined,
      bonusName: string | undefined,
      setAsPrimaryName: boolean,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * register_v1
   *
   * @param {string} name
   * @param {number} yearsToRegister
   * @param {string | undefined} referrer
   * @param {Array<FixedBytes<32>> | undefined} merkleProof
   * @param {boolean} setAsPrimaryName
   * @param {ContractCallOptions} options
   *
   * @selector 0x229b553f
   **/
  register: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      yearsToRegister: number,
      referrer: string | undefined,
      merkleProof: Array<FixedBytes<32>> | undefined,
      setAsPrimaryName: boolean,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {string} name
   * @param {number} yearsToRenew
   * @param {string | undefined} bonusName
   * @param {ContractCallOptions} options
   *
   * @selector 0xb5604092
   **/
  renew: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      yearsToRenew: number,
      bonusName: string | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<bigint, AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {Array<[string, number, string | undefined]>} data
   * @param {ContractCallOptions} options
   *
   * @selector 0xb3d33208
   **/
  batchRenew: GenericContractQueryCall<
    ChainApi,
    (
      data: Array<[string, number, string | undefined]>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<bigint, AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Allows users to claim their reserved name at zero cost
   *
   * @param {string} name
   * @param {boolean} setAsPrimaryName
   * @param {ContractCallOptions} options
   *
   * @selector 0x2251f2bc
   **/
  claimReservedName: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      setAsPrimaryName: boolean,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Release name from registration.
   *
   * @param {string} name
   * @param {ContractCallOptions} options
   *
   * @selector 0x3f2be152
   **/
  release: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Transfer owner to another address.
   *
   * @param {AccountId32Like} to
   * @param {string} name
   * @param {boolean} keepRecords
   * @param {boolean} keepController
   * @param {boolean} keepResolving
   * @param {BytesLike} data
   * @param {ContractCallOptions} options
   *
   * @selector 0x84a15da1
   **/
  transfer: GenericContractQueryCall<
    ChainApi,
    (
      to: AccountId32Like,
      name: string,
      keepRecords: boolean,
      keepController: boolean,
      keepResolving: boolean,
      data: BytesLike,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], InterfacesPsp34StandardPsp34Error>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Removes the associated state of expired-names from storage
   *
   * @param {Array<string>} names
   * @param {ContractCallOptions} options
   *
   * @selector 0xd00a53e5
   **/
  clearExpiredNames: GenericContractQueryCall<
    ChainApi,
    (
      names: Array<string>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<bigint, AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Set primary name of an address (reverse record)
   * @note if name is set to None then the primary-name for the caller will be removed (if exists)
   *
   * @param {string | undefined} primaryName
   * @param {ContractCallOptions} options
   *
   * @selector 0xad11843c
   **/
  setPrimaryName: GenericContractQueryCall<
    ChainApi,
    (
      primaryName: string | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Set resolved address for specific name.
   *
   * @param {string} name
   * @param {AccountId32Like} newAddress
   * @param {ContractCallOptions} options
   *
   * @selector 0xb8a4d3d9
   **/
  setAddress: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      newAddress: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {string} name
   * @param {AccountId32Like} newController
   * @param {ContractCallOptions} options
   *
   * @selector 0xc5e161ea
   **/
  setController: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      newController: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {Array<string>} names
   * @param {ContractCallOptions} options
   *
   * @selector 0x955299c9
   **/
  resetResolvedAddress: GenericContractQueryCall<
    ChainApi,
    (
      names: Array<string>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {Array<string>} names
   * @param {ContractCallOptions} options
   *
   * @selector 0x1dffd33a
   **/
  resetController: GenericContractQueryCall<
    ChainApi,
    (
      names: Array<string>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {string} name
   * @param {Array<[string, string | undefined]>} records
   * @param {boolean} removeRest
   * @param {ContractCallOptions} options
   *
   * @selector 0xde84a1ba
   **/
  updateRecords: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      records: Array<[string, string | undefined]>,
      removeRest: boolean,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Returns the current status of the name
   *
   * @param {Array<string>} names
   * @param {ContractCallOptions} options
   *
   * @selector 0x964d7612
   **/
  getNameStatus: GenericContractQueryCall<
    ChainApi,
    (
      names: Array<string>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Array<AznsRegistryNameStatus>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Get the addresses related to specific name
   *
   * @param {string} name
   * @param {ContractCallOptions} options
   *
   * @selector 0xf069dff3
   **/
  getAddressDict: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<AznsRegistryAddressDict, AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Get owner of specific name.
   *
   * @param {string} name
   * @param {ContractCallOptions} options
   *
   * @selector 0x07fcd0b1
   **/
  getOwner: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<AccountId32, AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Get controller of specific name.
   *
   * @param {string} name
   * @param {ContractCallOptions} options
   *
   * @selector 0x0abf0e97
   **/
  getController: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<AccountId32, AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Get address for specific name.
   *
   * @param {string} name
   * @param {ContractCallOptions} options
   *
   * @selector 0xd259f7ba
   **/
  getAddress: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<AccountId32, AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {string} name
   * @param {ContractCallOptions} options
   *
   * @selector 0x61437185
   **/
  getRegistrationPeriod: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[bigint, bigint], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Gets all records
   *
   * @param {string} name
   * @param {ContractCallOptions} options
   *
   * @selector 0x528be9f1
   **/
  getAllRecords: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Array<[string, string]>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Gets an arbitrary record by key
   *
   * @param {string} name
   * @param {string} key
   * @param {ContractCallOptions} options
   *
   * @selector 0x7e6cb4ce
   **/
  getRecord: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      key: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<string, AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * Returns all names the address owns
   *
   * @param {AccountId32Like} owner
   * @param {ContractCallOptions} options
   *
   * @selector 0xe413b13a
   **/
  getOwnedNamesOfAddress: GenericContractQueryCall<
    ChainApi,
    (
      owner: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Array<string>, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {AccountId32Like} controller
   * @param {ContractCallOptions} options
   *
   * @selector 0x9f25301e
   **/
  getControlledNamesOfAddress: GenericContractQueryCall<
    ChainApi,
    (
      controller: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Array<string>, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {AccountId32Like} address
   * @param {ContractCallOptions} options
   *
   * @selector 0xadd2f457
   **/
  getResolvingNamesOfAddress: GenericContractQueryCall<
    ChainApi,
    (
      address: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Array<string>, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {AccountId32Like} address
   * @param {ContractCallOptions} options
   *
   * @selector 0x404f1d73
   **/
  getPrimaryName: GenericContractQueryCall<
    ChainApi,
    (
      address: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<string, AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} address
   * @param {ContractCallOptions} options
   *
   * @selector 0xbf5b5677
   **/
  getPrimaryDomain: GenericContractQueryCall<
    ChainApi,
    (
      address: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        string | undefined,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {string} name
   * @param {ContractCallOptions} options
   *
   * @selector 0x5974dd04
   **/
  getLockInfo: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        AccountId32 | undefined,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} address
   * @param {ContractCallOptions} options
   *
   * @selector 0xf82caf60
   **/
  getNamesOfAddress: GenericContractQueryCall<
    ChainApi,
    (
      address: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Array<string>, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {AccountId32Like} user
   * @param {ContractCallOptions} options
   *
   * @selector 0xb779edfe
   **/
  getOwnerToNameCount: GenericContractQueryCall<
    ChainApi,
    (
      user: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<bigint, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {AccountId32Like} user
   * @param {ContractCallOptions} options
   *
   * @selector 0xf5e0d676
   **/
  getControllerToNameCount: GenericContractQueryCall<
    ChainApi,
    (
      user: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<bigint, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {AccountId32Like} user
   * @param {ContractCallOptions} options
   *
   * @selector 0x28610555
   **/
  getResolvingToNameCount: GenericContractQueryCall<
    ChainApi,
    (
      user: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<bigint, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x8405efa0
   **/
  getRecordsSizeLimit: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        number | undefined,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xd61daed4
   **/
  getTld: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<string, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x6e06617c
   **/
  getBaseUri: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<string, ContractCallResult<ChainApi>>
    >
  >;

  /**
   * (ADMIN-OPERATION)
   * Transfers `value` amount of tokens to the caller.
   *
   * @param {AccountId32Like | undefined} beneficiary
   * @param {bigint | undefined} value
   * @param {ContractCallOptions} options
   *
   * @selector 0x410fcc9d
   **/
  withdraw: GenericContractQueryCall<
    ChainApi,
    (
      beneficiary: AccountId32Like | undefined,
      value: bigint | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * (ADMIN-OPERATION)
   * Reserve name name for specific addresses
   *
   * @param {Array<[string, AccountId32Like | undefined]>} set
   * @param {boolean} skipNameChecker
   * @param {ContractCallOptions} options
   *
   * @selector 0x6e0d3fa8
   **/
  addReservedNames: GenericContractQueryCall<
    ChainApi,
    (
      set: Array<[string, AccountId32Like | undefined]>,
      skipNameChecker: boolean,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * (ADMIN-OPERATION)
   * Remove given names from the list of reserved names
   *
   * @param {Array<string>} set
   * @param {ContractCallOptions} options
   *
   * @selector 0x9ccff6c5
   **/
  removeReservedName: GenericContractQueryCall<
    ChainApi,
    (
      set: Array<string>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   * (ADMIN-OPERATION)
   * Update the limit of records allowed to store per name
   *
   * @param {number | undefined} limit
   * @param {ContractCallOptions} options
   *
   * @selector 0x7c9baef6
   **/
  setRecordsSizeLimit: GenericContractQueryCall<
    ChainApi,
    (
      limit: number | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {string} name
   * @param {AccountId32Like} recipient
   * @param {number} yearsToRegister
   * @param {string | undefined} referrer
   * @param {ContractCallOptions} options
   *
   * @selector 0xb565be46
   **/
  getNamePrice: GenericContractQueryCall<
    ChainApi,
    (
      name: string,
      recipient: AccountId32Like,
      yearsToRegister: number,
      referrer: string | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<
          [bigint, bigint, bigint, AccountId32 | undefined],
          AznsRegistryError
        >,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {Array<[string, AccountId32Like, number, string | undefined]>} input
   * @param {ContractCallOptions} options
   *
   * @selector 0xfc5a5fc3
   **/
  batchGetNamePrice: GenericContractQueryCall<
    ChainApi,
    (
      input: Array<[string, AccountId32Like, number, string | undefined]>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Array<
          Result<
            [bigint, bigint, bigint, AccountId32 | undefined],
            AznsRegistryError
          >
        >,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} recipient
   * @param {string} referrerName
   * @param {ContractCallOptions} options
   *
   * @selector 0x30fc989d
   **/
  validateReferrer: GenericContractQueryCall<
    ChainApi,
    (
      recipient: AccountId32Like,
      referrerName: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<boolean, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x57b8a8a7
   **/
  getAdmin: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<AccountId32, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xbcd31d76
   **/
  getPendingAdmin: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        AccountId32 | undefined,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like | undefined} account
   * @param {ContractCallOptions} options
   *
   * @selector 0x107e33ea
   **/
  transferOwnership: GenericContractQueryCall<
    ChainApi,
    (
      account: AccountId32Like | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xb55be9f0
   **/
  acceptOwnership: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], AznsRegistryError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {FixedBytes<32>} codeHash
   * @param {ContractCallOptions} options
   *
   * @selector 0x1345543d
   **/
  upgradeContract: GenericContractQueryCall<
    ChainApi,
    (
      codeHash: FixedBytes<32>,
      options: ContractCallOptions,
    ) => Promise<GenericContractCallResult<[], ContractCallResult<ChainApi>>>
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0xffa27a5f
   **/
  psp34CollectionId: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        InterfacesPsp34StandardId,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} owner
   * @param {ContractCallOptions} options
   *
   * @selector 0xcde7e55f
   **/
  psp34BalanceOf: GenericContractQueryCall<
    ChainApi,
    (
      owner: AccountId32Like,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<number, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {InterfacesPsp34StandardIdLike} id
   * @param {ContractCallOptions} options
   *
   * @selector 0x1168624d
   **/
  psp34OwnerOf: GenericContractQueryCall<
    ChainApi,
    (
      id: InterfacesPsp34StandardIdLike,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        AccountId32 | undefined,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} owner
   * @param {AccountId32Like} operator
   * @param {InterfacesPsp34StandardIdLike | undefined} id
   * @param {ContractCallOptions} options
   *
   * @selector 0x4790f55a
   **/
  psp34Allowance: GenericContractQueryCall<
    ChainApi,
    (
      owner: AccountId32Like,
      operator: AccountId32Like,
      id: InterfacesPsp34StandardIdLike | undefined,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<boolean, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {AccountId32Like} operator
   * @param {InterfacesPsp34StandardIdLike | undefined} id
   * @param {boolean} approved
   * @param {ContractCallOptions} options
   *
   * @selector 0x1932a8b0
   **/
  psp34Approve: GenericContractQueryCall<
    ChainApi,
    (
      operator: AccountId32Like,
      id: InterfacesPsp34StandardIdLike | undefined,
      approved: boolean,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], InterfacesPsp34StandardPsp34Error>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {AccountId32Like} to
   * @param {InterfacesPsp34StandardIdLike} id
   * @param {BytesLike} data
   * @param {ContractCallOptions} options
   *
   * @selector 0x3128d61b
   **/
  psp34Transfer: GenericContractQueryCall<
    ChainApi,
    (
      to: AccountId32Like,
      id: InterfacesPsp34StandardIdLike,
      data: BytesLike,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], InterfacesPsp34StandardPsp34Error>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x628413fe
   **/
  psp34TotalSupply: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<bigint, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {AccountId32Like} owner
   * @param {bigint} index
   * @param {ContractCallOptions} options
   *
   * @selector 0x3bcfb511
   **/
  psp34EnumerableOwnersTokenByIndex: GenericContractQueryCall<
    ChainApi,
    (
      owner: AccountId32Like,
      index: bigint,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<InterfacesPsp34StandardId, InterfacesPsp34StandardPsp34Error>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {bigint} index
   * @param {ContractCallOptions} options
   *
   * @selector 0xcd0340d0
   **/
  psp34EnumerableTokenByIndex: GenericContractQueryCall<
    ChainApi,
    (
      index: bigint,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<InterfacesPsp34StandardId, InterfacesPsp34StandardPsp34Error>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {InterfacesPsp34StandardIdLike} id
   * @param {BytesLike} key
   * @param {ContractCallOptions} options
   *
   * @selector 0xf19d48d1
   **/
  psp34MetadataGetAttribute: GenericContractQueryCall<
    ChainApi,
    (
      id: InterfacesPsp34StandardIdLike,
      key: BytesLike,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Bytes | undefined, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x8e1d8d71
   **/
  psp34TraitsGetOwner: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<AccountId32, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {InterfacesPsp34StandardIdLike} tokenId
   * @param {ContractCallOptions} options
   *
   * @selector 0x249dfd4f
   **/
  psp34TraitsTokenUri: GenericContractQueryCall<
    ChainApi,
    (
      tokenId: InterfacesPsp34StandardIdLike,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<string, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {string} uri
   * @param {ContractCallOptions} options
   *
   * @selector 0x4de6850b
   **/
  psp34TraitsSetBaseUri: GenericContractQueryCall<
    ChainApi,
    (
      uri: string,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], InterfacesArtZeroTraitsArtZeroError>,
        ContractCallResult<ChainApi>
      >
    >
  >;

  /**
   *
   * @param {ContractCallOptions} options
   *
   * @selector 0x61c50d69
   **/
  psp34TraitsGetAttributeCount: GenericContractQueryCall<
    ChainApi,
    (
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<number, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {number} index
   * @param {ContractCallOptions} options
   *
   * @selector 0xfcfe34de
   **/
  psp34TraitsGetAttributeName: GenericContractQueryCall<
    ChainApi,
    (
      index: number,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<string, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {InterfacesPsp34StandardIdLike} tokenId
   * @param {Array<string>} attributes
   * @param {ContractCallOptions} options
   *
   * @selector 0x18209102
   **/
  psp34TraitsGetAttributes: GenericContractQueryCall<
    ChainApi,
    (
      tokenId: InterfacesPsp34StandardIdLike,
      attributes: Array<string>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<Array<string>, ContractCallResult<ChainApi>>
    >
  >;

  /**
   *
   * @param {InterfacesPsp34StandardIdLike} tokenId
   * @param {Array<[string, string]>} metadata
   * @param {ContractCallOptions} options
   *
   * @selector 0x5bf8416b
   **/
  psp34TraitsSetMultipleAttributes: GenericContractQueryCall<
    ChainApi,
    (
      tokenId: InterfacesPsp34StandardIdLike,
      metadata: Array<[string, string]>,
      options: ContractCallOptions,
    ) => Promise<
      GenericContractCallResult<
        Result<[], InterfacesArtZeroTraitsArtZeroError>,
        ContractCallResult<ChainApi>
      >
    >
  >;
}
